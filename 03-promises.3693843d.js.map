{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAAAC,QAAQC,IAAI,MAGZ,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,kBAC/BE,EAAOH,SAASC,cAAc,iBAC9BG,EAASJ,SAASC,cAAc,mBA4BtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,EAAUS,MAAAR,IAEpBG,EAAO,C,SAAEJ,EAAUS,MAAAR,GAAQ,GAE5BA,EAAM,G,CAnCbR,EAAKiB,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAEC,iBACF,IAAIC,EAAYC,OAAOlB,EAAMmB,OACzBC,EAAWF,OAAOjB,EAAKkB,OACvBE,EAAaH,OAAOhB,EAAOiB,OAC/B,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAYC,GAAY,EACzDnB,EAAcmB,EAAUL,GACrBM,MAAK,EAACnB,SAAEA,EAAUS,MAAAW,MACjB/B,EAAAgC,OAAOC,QAAQ,uBAAqBtB,QAAiBoB,MAAW,CAC5DG,cAAY,EACdC,QAAS,KACT,IAEHC,OAAM,EAACzB,SAAEA,EAAUS,MAAAiB,MAClBrC,EAAAgC,OAAOM,QAAQ,sBAAoB3B,QAAe0B,MAAW,CAC3DH,cAAc,EACdC,QAAS,KACT,IAENX,GAAaG,EAEfL,EAAEiB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["console.log('Hi');\n\nimport Notiflix, { Notify } from 'notiflix';\nconst form = document.querySelector('.form');\nconst delay = document.querySelector('[name=\"delay\"]');\nconst step = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  let userDelay = Number(delay.value);\n  let userStep = Number(step.value);\n  let userAmount = Number(amount.value);\n  for (let position = 1; position <= userAmount; position += 1) {\n    createPromise(position, userDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n          timeout: 10000,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n          timeout: 10000,\n        });\n      });\n    userDelay += userStep;\n  }\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // Fulfill\n      } else {\n        reject({ position, delay }); // Reject\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","console","log","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","e","preventDefault","userDelay","Number","value","userStep","userAmount","position1","then","delay1","Notify","success","clickToClose","timeout","catch","delay2","failure","currentTarget","reset"],"version":3,"file":"03-promises.3693843d.js.map"}