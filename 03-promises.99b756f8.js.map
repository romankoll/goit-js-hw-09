{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAAAC,QAAQC,IAAI,MAGZ,IAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,kBAC/BE,EAAOH,SAASC,cAAc,iBAC9BG,EAASJ,SAASC,cAAc,mBA4BtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUS,MAAAR,IAEpBG,EAAO,CAAEJ,WAAUS,MAAAR,G,GAEpBA,E,IAnCPR,EAAKiB,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAEC,iBAIF,IAHA,IAAIC,EAAYC,OAAOlB,EAAMmB,OACzBC,EAAWF,OAAOjB,EAAKkB,OACvBE,EAAaH,OAAOhB,EAAOiB,OACtBG,EAAW,EAAGA,GAAYD,EAAYC,GAAY,EACzDnB,EAAcmB,EAAUL,GACrBM,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUqB,EAAKD,EAALX,MACjBpB,EAAAiC,OAAOC,QAAQ,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANH,EAAM,MAAK,CAC9DI,cAAY,EACdC,QAAS,K,IAGZC,OAAM,SAAAP,G,IAAGpB,EAAQoB,EAARpB,SAAU4B,EAAKR,EAALX,MAClBpB,EAAAiC,OAAOO,QAAQ,sBAAqCL,OAAfxB,EAAS,QAAYwB,OAANI,EAAM,MAAK,CAC7DH,cAAc,EACdC,QAAS,K,IAGfb,GAAaG,EAEfL,EAAEmB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["console.log('Hi');\n\nimport Notiflix, { Notify } from 'notiflix';\nconst form = document.querySelector('.form');\nconst delay = document.querySelector('[name=\"delay\"]');\nconst step = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  let userDelay = Number(delay.value);\n  let userStep = Number(step.value);\n  let userAmount = Number(amount.value);\n  for (let position = 1; position <= userAmount; position += 1) {\n    createPromise(position, userDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n          timeout: 10000,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          clickToClose: true,\n          timeout: 10000,\n        });\n      });\n    userDelay += userStep;\n  }\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // Fulfill\n      } else {\n        reject({ position, delay }); // Reject\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","console","log","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","e","preventDefault","userDelay","Number","value","userStep","userAmount","position1","then","param","delay1","Notify","success","concat","clickToClose","timeout","catch","delay2","failure","currentTarget","reset"],"version":3,"file":"03-promises.99b756f8.js.map"}